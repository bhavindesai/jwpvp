<?php

/**
 * @file
 * JWPlayer helper methods file.
 */

/**
 * Verifies API keys.
 *
 * @param string $read_token
 *   An optional read token instead of the stored one.
 */
function jwpvp_verify_bc_tokens($read_token = NULL) {
  $bc = jwpvp_bc_initialize($read_token);

  $read = FALSE;
  try {
    $read = $bc->find('videobyid', 0) || TRUE;
  } catch (Exception $e) {
    watchdog('jwpvp', 'Invalid Brightcove Read API keys.', $e, $severity = WATCHDOG_NOTICE);
  }

  return $read;
}

/**
 * Loads video using Brightcove's Media API.
 *
 * @param $video_id
 * @param $reset
 *
 * @return mixed
 * Video object or FALSE if video not found.
 */
function jwpvp_bc_video_load($video_id, $reset = FALSE) {

  //First check if the video details are already cached.
  $cachefound = cache_get('bc_video_' . $video_id);

  if ($cachefound !== FALSE && $reset == FALSE) {
    $video = $cachefound->data;
    if (!empty($video->id)) {
      return $video;
    }
  }
  else {
    $bc = jwpvp_bc_initialize();
    try {
      // Custom fields and delivery method.
      $fields = 'id,name,shortDescription,videoFullLength,length,renditions,itemState,videoStillURL,thumbnailURL,';

      //media delivery as HTTP because other protocols are not supported (for example, rtmp).
      $params = array('video_id' => $video_id,
        'video_fields' => $fields,
        'media_delivery' => 'http'
      );

      $video = $bc ? $bc->find('find_video_by_id', $params) : NULL;
    } catch (Exception $error) {
      watchdog('jwpvp', 'Loading video failed.', array(), WATCHDOG_ERROR);
      return FALSE;
    }
    if (!empty($video->id)) {
      if ($reset == FALSE) {
        //Cache it so next time an API call is not fired.
        $cache_time = variable_get('bc_cache', '1800');
        cache_set('bc_video_' . $video_id, $video, $bin = 'cache', time() + $cache_time);
      }
      return $video;
    }
  }
  return FALSE;
}

/**
 * Return the path to the Brightcove MAPI library.
 *
 * If variable_get('jwpvp_bc_mapi_path') has not yet been set, then
 * this will attempt to autodiscover the path if the bc-mapi.php file exists
 * within sites/all/libraries/* or sites/example.com/libraries/*. It will also
 * set the path to variable_get('jwpvp_bc_mapi_path').
 *
 * The library is available from http://opensource.brightcove.com/project/PHP-MAPI-Wrapper/.
 *
 * @return string
 *   The path to the bc-mapi.php file.
 */
function jwpvp_bc_mapi_path() {
  $path = &drupal_static(__FUNCTION__);

  if (!isset($path)) {
    if (!($path = variable_get('jwpvp_bc_mapi_path', FALSE))) {
      $files = drupal_system_listing('/^bc-mapi\.php$/', 'libraries', 'filename', 0);
      if (isset($files['bc-mapi.php'])) {
        $path = dirname($files['bc-mapi.php']->uri);
        variable_set('jwpvp_bc_mapi_path', $path);
      }
    }
  }

  return $path;
}

/**
 * Initializes the Brightcove Media API and returns an instance of the object.
 *
 * @param string $read_token
 *   An optional read token instead of the stored one.
 * @param string $write_token
 *   An optional write token instead of the stored one.
 *
 * @return BCMAPI
 *   Instance of the Brightcove Media API or FALSE if fails to initialize.
 */
function jwpvp_bc_initialize($read_token = NULL, $write_token = NULL) {

  if (empty($read_token)) {
    $read_token = variable_get('jwpvp_bc_read_key', '');
  }

  if (empty($read_token)) {
    drupal_set_message(t('Cannot initialize Brightcove API. Contact site administrators.'), 'error');
    watchdog('jwpvp', 'Brightcove Read API keys not found, cannot initialize Brightcove MAPI SDK.', array(), WATCHDOG_ERROR);
    return FALSE;
  }

  include_once jwpvp_bc_mapi_path() . '/bc-mapi.php';

  $bc = new BCMAPI($read_token);

  return $bc;
}

/**
 * Autocomplete callback for listing videos.
 *
 * @param $string
 */
function jwpvp_bc_video_field_autocomplete($type, $string) {

  $bc = jwpvp_bc_initialize();
  $matches = array();
  $result = array();

  try {
    $result = $bc->find('find_videos_by_text', array('text' => $string));
  } catch (Exception $error) {
    watchdog('jwpvp', 'Finding videos in autocomplete failed.', array(), WATCHDOG_ERROR);
  }

  foreach ((array) $result as $bc_item) {
    // Note: Brightcove ID is autogenerated by Brightcove and thus doesn't require XSS protection.
    $matches[check_plain($bc_item->name) . ' [id:' . $bc_item->id . ']'] = check_plain($bc_item->name) . ' [id: ' . $bc_item->id . ']';
  }
  drupal_json_output($matches);
}

/**
 * Validate callback for the jwpvp field.
 */
function jwpvp_bc_video_field_validate($element, &$form_state) {
  $id = '';
  $value = $element['#value'];
  if (!empty($value)) {
    // Assign ID to the value.
    // 231289 [id:72431493001]
    $id = jwpvp_bc_parse_id($value);

    if (is_numeric($id)) {
      // Matched ID, check if the video exists.
      $video = jwpvp_bc_video_load($id);
      // Check value in session variable for newly uploaded video.
      if (empty($video)) {
        form_error($element, t('%name: Found no valid video with that name. Please note that it might take several minutes after the video has been uploaded in Brightcove Studio to appear in the API.', array('%name' => t($element['#title']))));
      }
    }
    else {
      // Didn't match ID, try looking up the video text at BC.
      $bc = jwpvp_bc_initialize();
      $result = NULL;
      try {
        $result = $bc->search('video', array('all' => 'display_name:' . $value), array('sort_by' => 'CREATION_DATE', 'sort_order' => 'DESC'));
      } catch (Exception $error) {
        form_error($element, t('There was a problem accessing Brightcove. Please try again'));
        watchdog('jwpvp', 'Validating element with Brightcove failed', array(), WATCHDOG_ERROR);
      }
      if (count($result) > 1) {
        // This title is ambiguous.
        form_error($element, t('%name: Video title %title matched more than one video. In case of doubt, use text "title [id:ID_OF_THE_VIDEO]"', array('%title', $value, '%name' => t($element['#title']))));
      }
      elseif (count($result) == 0) {
        // No video found.
        form_error($element, t('%name: Found no valid video with that name. Please note that it might take several minutes after the video has been uploaded in Brightcove Studio to appear in the API.', array('%name' => t($element['#title']))));
      }
      else {
        $id = $result[0]->id;
      }
    }
  }
  form_set_value($element, $id, $form_state);
}

/**
 * Parse a field value in form of "title [id:123]" and return 123
 *
 * @param $id
 *   Video ID in form of "title [id:123]".
 * @return
 *   Int value of the ID or NULL if not found.
 */
function jwpvp_bc_parse_id($id) {
  preg_match('/\[id:([^\[]*)\]$/', $id, $matches);
  if (count($matches) == 2) {
    return $matches[1];
  }
  return $id;
}

/**
 * Callback for jwpvp field widget.
 * Will return a field value in "video-name [id:videoId]" format.
 */
function jwpvp_field_videoid_value($element, $value, $form_state) {
  $input = drupal_array_get_nested_value($form_state['input'], $element['#parents']);
  if (!$value && $input === NULL) {
    $value = $element['#default_value'];
  }

  if (((int) $value) > 1) {
    $video = jwpvp_bc_video_load($value);

    if (!empty($video->id)) {
      $value = check_plain($video->name) . " [id:{$video->id}]";
    }
  }
  return $value;
}
